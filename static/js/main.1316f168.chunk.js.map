{"version":3,"sources":["nophotoavailable-icon.jpg","EventResult.js","Loader.js","EventsPage.js","GroupResult.js","GroupsPage.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","EventResult","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","descVisible","handleClick","bind","assertThisInitialized","e","preventDefault","setState","prevState","react_default","a","createElement","className","tabIndex","onClick","props","eventName","eventDate","eventTime","concat","href","eventLink","eventVenue","city","eventAddress","dangerouslySetInnerHTML","__html","eventDescription","React","Component","Loader","EventsPage","match","urlName","params","urlname","events","group","groupLoading","eventsLoading","hasGroupError","hasEventsError","insertObjectData","handleGroupDescriptionClick","_this2","jsonp","err","data","object","type","has","get","noPhoto","_this3","eventErrorJSX","groupErrorJSX","noEventsMessage","groupLoaderJSX","eventLoaderJSX","groupInfo","src_Loader","length","link","name","src","alt","localized_location","localized_country_name","members","description","map","event","index","key","id","src_EventResult","GroupResult","thumbnailImage","groupName","memberCount","country","query","queryString","parse","location","search","currentUrlPath","groupResults","isLoading","hasError","noResults","callGroupAPI","insertGroupPhoto","_this4","console","log","react_router_dom","to","src_GroupResult","App","searchText","handleSearch","handleTextChange","history","push","target","value","trim","htmlFor","onChange","react_router","path","component","GroupsPage","withRouter","Boolean","window","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1316f168.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/nophotoavailable-icon.3e29177e.jpg\";","import React from 'react';\r\n\r\nclass EventResult extends React.Component {\r\n  constructor () {\r\n    super();\r\n    this.state = {\r\n      descVisible: false\r\n    };\r\n\r\n    this.handleClick = this.handleClick.bind(this);\r\n  }\r\n\r\n  // Handles whether or not to show the event description when clicked on.\r\n  handleClick (e) {\r\n    e.preventDefault();\r\n    this.setState(prevState => ({ descVisible: !prevState.descVisible }));\r\n  }\r\n\r\n  render () {\r\n    return (\r\n      <div className='event-container' tabIndex='0'>\r\n        <button className='info-toggle event-info-toggle' tabIndex='0' onClick={this.handleClick} >Show/Hide Details</button>\r\n        <h4>{this.props.eventName}</h4>\r\n        <p className='event-datetime'>Event Date and Time: {this.props.eventDate}  {this.props.eventTime}</p>\r\n        <div className={`event-information${this.state.descVisible ? '' : ' hidden'}`}>\r\n          <a className='event-link' href={this.props.eventLink}>Click here for the event link.</a>\r\n          <p className='event-address'>Venue: {this.props.eventVenue}, {this.props.city}</p>\r\n          <p className='event-address'>{this.props.eventAddress}</p>\r\n          <div className='event-description' dangerouslySetInnerHTML={{ __html: this.props.eventDescription }} />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default EventResult;\r\n","import React from 'react';\r\n\r\nconst Loader = () => {\r\n  return (\r\n    <div className='loading-container'>\r\n      <div className='loading-bar bar1' />\r\n      <div className='loading-bar bar2' />\r\n      <div className='loading-bar bar3' />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Loader;\r\n","import React from 'react';\r\nimport EventResult from './EventResult';\r\nimport jsonp from 'jsonp';\r\nimport { has, get } from 'lodash';\r\nimport noPhoto from '../src/nophotoavailable-icon.jpg';\r\nimport Loader from './Loader';\r\n\r\nclass EventsPage extends React.Component {\r\n  constructor (props) {\r\n    super(props);\r\n\r\n    const { match } = props;\r\n\r\n    this.state = {\r\n      urlName: match.params.urlname,\r\n      events: [],\r\n      group: {},\r\n      groupLoading: true,\r\n      eventsLoading: true,\r\n      hasGroupError: false,\r\n      hasEventsError: false,\r\n      descVisible: false\r\n    };\r\n\r\n    // Bind functions so React likes them\r\n    this.insertObjectData = this.insertObjectData.bind(this);\r\n    this.handleGroupDescriptionClick = this.handleGroupDescriptionClick.bind(this);\r\n  }\r\n\r\n  componentDidMount () {\r\n    // Do a jsonp call to the API to get the group information once mounted\r\n    jsonp(`https://api.meetup.com/${this.state.urlName}?key=5e2a4f7e595a61e6c1b2268171a1018`, null, (err, data) => {\r\n    // If there's an error, set the appropriate error flags in State\r\n      if (err) {\r\n        this.setState({\r\n          hasGroupError: true,\r\n          groupLoading: false\r\n        });\r\n      } else {\r\n        this.setState({\r\n          group: data.data,\r\n          groupLoading: false,\r\n          hasGroupError: false\r\n        });\r\n      }\r\n    });\r\n    // Do a jsonp call to get the events data for the chosen group\r\n    jsonp(`https://api.meetup.com/${this.state.urlName}/events?key=5e2a4f7e595a61e6c1b2268171a1018&page=10`, null, (err, data) => {\r\n      // If there's an error, set the appropriate error flags in State\r\n      if (err) {\r\n        this.setState({\r\n          hasEventsError: true,\r\n          eventsLoading: false\r\n        });\r\n      } else {\r\n        this.setState({\r\n          events: data.data,\r\n          eventsLoading: false,\r\n          hasEventsError: false\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  // This function uses lodash has and get to ensure that if any properties are missing from the returned API data object that are needed to display, placeholder text is used instead.\r\n  insertObjectData (object, type) {\r\n    if (has(object, type)) {\r\n      return get(object, type);\r\n    } else {\r\n      switch (type) {\r\n        case 'name':\r\n          return 'No Event Name Specified';\r\n        case 'local_date':\r\n          return 'No Date';\r\n        case 'local_time':\r\n          return 'No Time';\r\n        case 'description':\r\n          return 'No Event Description.';\r\n        case 'venue.name':\r\n          return 'No venue specified';\r\n        case 'venue.city':\r\n          return 'City not specified';\r\n        case 'venue.address_1':\r\n          return '';\r\n        case 'group_photo.photo_link':\r\n          return noPhoto;\r\n        default:\r\n          return '';\r\n      }\r\n    }\r\n  }\r\n\r\n  // Toggles the description of the group being visible or not.\r\n  handleGroupDescriptionClick (e) {\r\n    e.preventDefault();\r\n    this.setState(prevState => ({ descVisible: !prevState.descVisible }));\r\n  }\r\n\r\n  render () {\r\n    // The following code writes in error messages if the API failed to load any information, and displays loading bars while the API request is running.\r\n    let eventErrorJSX = null;\r\n    let groupErrorJSX = null;\r\n    let noEventsMessage = null;\r\n    let groupLoaderJSX = null;\r\n    let eventLoaderJSX = null;\r\n    let groupInfo = null;\r\n\r\n    if (this.state.eventsLoading) {\r\n      eventLoaderJSX = <Loader />;\r\n    }\r\n\r\n    if (this.state.groupLoading) {\r\n      groupLoaderJSX = <Loader />;\r\n    }\r\n\r\n    if (this.state.events.length === 0 &&\r\n            this.state.eventsLoading === false &&\r\n            this.state.hasEventsError === false &&\r\n            this.state.hasGroupError === false) {\r\n      noEventsMessage = <h3>No upcoming events for the selected group.</h3>;\r\n    }\r\n\r\n    if (this.state.hasGroupError) {\r\n      groupErrorJSX = <h3>There was an API error fetching group info. Either your network is down, or the API has an issue.</h3>;\r\n    }\r\n\r\n    if (this.state.hasEventsError) {\r\n      eventErrorJSX = <h3>There was an API error fetching event info for the group. Either your network is down, or the API has an issue.</h3>;\r\n    }\r\n\r\n    if (this.state.groupLoading === false &&\r\n            this.state.hasEventsError === false) {\r\n      groupInfo = (\r\n        <div className='group-details-info'>\r\n          <p>Group Details: {this.state.urlName}</p>\r\n          <a href={this.state.group.link}><h3>{this.state.group.name}</h3></a>\r\n          <div className='group-details-image-container'>\r\n            <img className='group-thumbnail-image' src={this.insertObjectData(this.state.group, 'group_photo.photo_link')} alt={this.state.group.name + ' group logo'} />\r\n          </div>\r\n          <p>{this.state.group.localized_location}, {this.state.group.localized_country_name}</p>\r\n          <p>{this.state.group.members} Members.</p>\r\n          <button className='info-toggle' tabIndex='0' onClick={this.handleGroupDescriptionClick} >Show/Hide Description</button>\r\n          <div className={`group-details-info-desc ${this.state.descVisible ? '' : ' hidden'}`} dangerouslySetInnerHTML={{ __html: this.state.group.description }} />\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <div className='group-event-container'>\r\n        <div className='group-details-container'>\r\n          {groupLoaderJSX}\r\n          {groupErrorJSX}\r\n          {groupInfo}\r\n        </div>\r\n        <div className='group-event-list'>\r\n          <h3 className='group-event-list-header'>Upcoming Events:</h3>\r\n          {noEventsMessage}\r\n          {eventLoaderJSX}\r\n          {eventErrorJSX}\r\n          <ul>\r\n            {this.state.events.map((event, index) => {\r\n              return (\r\n                <li className='event-list-item' key={event.id}>\r\n                  <EventResult eventName={this.insertObjectData(event, 'name')} eventDate={this.insertObjectData(event, 'local_date')} eventTime={this.insertObjectData(event, 'local_time')} eventLink={event.link} eventDescription={this.insertObjectData(event, 'description')} eventVenue={this.insertObjectData(event, 'venue.name')} city={this.insertObjectData(event, 'venue.city')} eventAddress={this.insertObjectData(event, 'venue.address_1')} />\r\n\r\n                </li>\r\n              );\r\n            })}\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default EventsPage;\r\n","import React from 'react';\r\n\r\nconst GroupResult = (props) => {\r\n  return (\r\n    <div className='group-container'>\r\n      <div className='group-header'>\r\n        <div className='group-image-container'>\r\n          <img className='group-thumbnail-image' src={props.thumbnailImage} alt={`${props.groupName} group thumbnail`} />\r\n        </div>\r\n        <h4>{props.groupName}</h4>\r\n      </div>\r\n      <div className='group-information'>\r\n        <p>{props.memberCount} Members</p>\r\n        <p>{props.city}, {props.country}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GroupResult;\r\n","import React from 'react';\r\nimport GroupResult from './GroupResult';\r\nimport { Link } from 'react-router-dom';\r\nimport queryString from 'query-string';\r\nimport { has, get } from 'lodash';\r\nimport jsonp from 'jsonp';\r\nimport noPhoto from '../src/nophotoavailable-icon.jpg';\r\nimport Loader from './Loader';\r\n\r\nclass EventsPage extends React.Component {\r\n  constructor (props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      query: queryString.parse(props.location.search),\r\n      currentUrlPath: props.location,\r\n      groupResults: [],\r\n      isLoading: true,\r\n      hasError: false,\r\n      noResults: false\r\n    };\r\n\r\n    // Bind functions so React likes them\r\n    this.callGroupAPI = this.callGroupAPI.bind(this);\r\n    this.insertGroupPhoto = this.insertGroupPhoto.bind(this);\r\n  }\r\n\r\n  // Calls the API to find groups based on search term and sets appropriate flags in State\r\n  callGroupAPI () {\r\n    jsonp(`https://api.meetup.com/find/groups?key=5e2a4f7e595a61e6c1b2268171a1018&page=25&text=${this.state.query.search}`, null, (err, data) => {\r\n      if (err) {\r\n        this.setState({\r\n          hasError: true,\r\n          isLoading: false\r\n        });\r\n      } else {\r\n        if (data.data.length > 0) {\r\n          this.setState({\r\n            groupResults: data.data,\r\n            isLoading: false,\r\n            hasError: false\r\n          });\r\n        } else {\r\n          this.setState({\r\n            isLoading: false,\r\n            noResults: true\r\n          });\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  // Check to see if the group object data has a group photo thumbnail. If not, provide a placeholder\r\n  insertGroupPhoto (object, type) {\r\n    if (has(object, type)) {\r\n      return get(object, type);\r\n    } else {\r\n      return noPhoto;\r\n    }\r\n  }\r\n\r\n  componentDidMount () {\r\n    this.setState({\r\n      currentUrlPath: this.props.location\r\n    });\r\n\r\n    // As long as search query isn't empty, call the API to search for groups when component mounts\r\n    if (this.state.query.search !== '') {\r\n      this.callGroupAPI();\r\n    }\r\n  }\r\n\r\n  // On update, check to see if the URL path has changed with a new search query. If so, call the API again\r\n  componentDidUpdate () {\r\n    if (this.state.currentUrlPath !== this.props.location) {\r\n      this.setState({\r\n        query: queryString.parse(this.props.location.search),\r\n        currentUrlPath: this.props.location,\r\n        isLoading: true,\r\n        noResults: false\r\n      }, () => {\r\n        this.callGroupAPI();\r\n      });\r\n    }\r\n  }\r\n\r\n  render () {\r\n    if (this.state.isLoading) {\r\n      return (<Loader />);\r\n    }\r\n\r\n    if (this.state.hasError) {\r\n      return (<h2>API Error! Network connection may be interrupted, or the API may be experiencing issues.</h2>);\r\n    }\r\n\r\n    if (this.state.noResults) {\r\n      return (<h2>No results found. Please try to refine your search terms.</h2>);\r\n    }\r\n\r\n    return (\r\n      <div className='group-results-container'>\r\n        {this.state.groupResults.map((group, index) => {\r\n          console.log('Index ', index);\r\n          return <Link to={`/group/${group.urlname}`}><GroupResult groupName={group.name} memberCount={group.members} city={group.localized_location} country={group.localized_country_name} thumbnailImage={this.insertGroupPhoto(group, 'group_photo.thumb_link')} /></Link>;\r\n        })}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default EventsPage;\r\n","import React from 'react';\nimport './App.css';\nimport EventsPage from './EventsPage';\nimport GroupsPage from './GroupsPage';\nimport {\n  Route,\n  withRouter\n} from 'react-router-dom';\n\nclass App extends React.Component {\n  constructor () {\n    super();\n\n    this.state = {\n      searchText: ''\n    };\n\n    // Bind functions so React likes them\n    this.handleSearch = this.handleSearch.bind(this);\n    this.handleTextChange = this.handleTextChange.bind(this);\n  }\n\n  // Handles the search button being clicked\n  handleSearch (e) {\n    e.preventDefault();\n\n    // ensure that the search field isn't empty\n    if (this.state.searchText !== '') {\n      // insert the search query into browser back history so that someone can access the search directly later\n      this.props.history.push(`/groups?search=${this.state.searchText}`);\n    }\n  }\n\n  // Handles the text input changing every time a letter is typed\n  handleTextChange (e) {\n    // Sets the state of the searchText input and trims off leading or trailing whitespace\n    this.setState({\n      searchText: (e.target.value).trim()\n    });\n  }\n\n  render () {\n    return (\n      <div className='wrapper'>\n        <header>\n          <p>Achievers Interview Home Project</p>\n        </header>\n        <section>\n          <h1>Meetup.com Event Search!</h1>\n          <form>\n            <label className='search-input-label' htmlFor='search'>Enter Group Search Term:</label>\n            <input className='search-input-box' onChange={this.handleTextChange} type='text' name='search' />\n            <button className='search-button' onClick={this.handleSearch}>Search for Groups</button>\n          </form>\n        </section>\n\n        <Route path='/groups' component={GroupsPage} />\n        <Route path='/group/:urlname' component={EventsPage} />\n\n        <footer>\n          <p>Copyright Adam Pachulski</p>\n        </footer>\n      </div>\n    );\n  }\n}\n\nexport default withRouter(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter as Router } from 'react-router-dom'\n\nReactDOM.render(\n<Router>\n    <App />\n</Router>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}